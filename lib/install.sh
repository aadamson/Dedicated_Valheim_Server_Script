#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([interactive],[i],[Use interactive mode])
# ARG_OPTIONAL_SINGLE([user_passsword],[u],[Password for the steam account])
# ARG_OPTIONAL_SINGLE([display],[d],[Display name for the server])
# ARG_OPTIONAL_SINGLE([world],[w],[World name for the server])
# ARG_OPTIONAL_SINGLE([password],[p],[Password for the server])
# ARG_OPTIONAL_SINGLE([path],[o],[Install path])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

set -e

die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='iudwpoh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_interactive=
_arg_user_passsword=
_arg_display=
_arg_world=
_arg_password=
_arg_path=/home/steam/valheimserver


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-i|--interactive <arg>] [-u|--user_passsword <arg>] [-d|--display <arg>] [-w|--world <arg>] [-p|--password <arg>] [-o|--path <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-i, --interactive: Use interactive mode (no default)"
	printf '\t%s\n' "-u, --user_passsword: Password for the steam account (no default)"
	printf '\t%s\n' "-d, --display: Display name for the server (no default)"
	printf '\t%s\n' "-w, --world: World name for the server (no default)"
	printf '\t%s\n' "-p, --password: Password for the server (no default)"
	printf '\t%s\n' "-o, --path: Install path (default is ${_arg_path})"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-i|--interactive)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_interactive="$2"
				shift
				;;
			--interactive=*)
				_arg_interactive="${_key##--interactive=}"
				;;
			-i*)
				_arg_interactive="${_key##-i}"
				;;
			-u|--user_passsword)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_user_passsword="$2"
				shift
				;;
			--user_passsword=*)
				_arg_user_passsword="${_key##--user_passsword=}"
				;;
			-u*)
				_arg_user_passsword="${_key##-u}"
				;;
			-d|--display)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_display="$2"
				shift
				;;
			--display=*)
				_arg_display="${_key##--display=}"
				;;
			-d*)
				_arg_display="${_key##-d}"
				;;
			-w|--world)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_world="$2"
				shift
				;;
			--world=*)
				_arg_world="${_key##--world=}"
				;;
			-w*)
				_arg_world="${_key##-w}"
				;;
			-p|--password)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_password="$2"
				shift
				;;
			--password=*)
				_arg_password="${_key##--password=}"
				;;
			-p*)
				_arg_password="${_key##-p}"
				;;
			-o|--path)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_path="$2"
				shift
				;;
			--path=*)
				_arg_path="${_key##--path=}"
				;;
			-o*)
				_arg_path="${_key##-o}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

# START OF OUR SCRIPT
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# shellcheck source=./colors.sh
source "${DIR}/colors.sh"

########################################################################
########################Install Valheim Server##########################
########################################################################

function valheim_server_install() {
    parse_commandline "$@"

    clear
    echo ""
    echo -ne "
    $(ColorOrange '-----------------Install Valheim Server------------------')
    $(ColorRed '------------------------------------------------------------')"
    echo ""
    tput setaf 2; echo "You are about to INSTALL the Valheim Server" ; tput setaf 9; 
    if [[ -z "${_arg_interactive}" ]]; then
      confirmStartInstall="y"
      echo -ne "
      $(ColorRed '------------------------------------------------------------')"
      echo ""
    else
      tput setaf 2; echo "You are you sure y(YES) or n(NO)?" ; tput setaf 9; 
      echo -ne "
      $(ColorRed '------------------------------------------------------------')"
      echo ""
      read -p "Please confirm:" confirmStartInstall
    fi
#if y, then continue, else cancel
    if [ "$confirmStartInstall" == "y" ]; then
    echo ""

#check for updates and upgrade the system auto yes
    tput setaf 1; echo "Checking for upgrades" ; tput setaf 9;
    apt update && apt upgrade -y
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1
    
#check for updates and upgrade the system auto yes
    tput setaf 1; echo "Install Git, Locate and Net-Tools" ; tput setaf 9;
    apt install git mlocate net-tools -y
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1
    
#install software-properties-common for add-apt-repository command below
    tput setaf 1; echo "Installing software-properties-common package"
    apt install software-properties-common
    tput setaf 2; echo "Done"
    tput setaf 9;
    sleep 1

#add multiverse repo
    tput setaf 1; echo "Adding multiverse REPO" ; tput setaf 9;
    add-apt-repository -y multiverse
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

#add i386 architecture
    tput setaf 1; echo "Adding i386 architecture" ; tput setaf 9;
    dpkg --add-architecture i386
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

#update system again
    tput setaf 1; echo "Checking and updating system again" ; tput setaf 9;
    apt update
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

# Linux Steam Local Account Password input
    echo ""
    clear
    echo "Thanks for downloading the script, let's get started"
    echo "The following information is required for configuration files"
    echo "Read each step carefully"
    echo "A printout of data entered will be displayed to you"
    echo ""
    echo "A non-root account will be created to run Valheim Server"
    echo "This account is named steam"
    if [[ -z "${_arg_user_passsword}" ]]; then
      while true; do
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        tput setaf 2; echo "----------------NONROOT STEAM ACCOUNT PASSWORD--------------" ; tput setaf 9;
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        tput setaf 1; echo "Password must be 6 Characters or more" ; tput setaf 9;
        tput setaf 1 ;echo "At least one number, one uppercase letter and one lowercase letter" ; tput setaf 9;
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        tput setaf 2;  echo "Good Example: Viking12" ; tput setaf 9;
        tput setaf 1;  echo "Bad Example: Vik!" ; tput setaf 9;
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        echo ""
        read -p "Please give steam a password: " userpassword
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        [[ ${#userpassword} -ge 6 && "$userpassword" == *[[:lower:]]* && "$userpassword" == *[[:upper:]]* && "$userpassword" =~ ^[[:alnum:]]+$ ]] && break
        tput setaf 2; echo "Password not accepted - Too Short or has Special Characters" ; tput setaf 9;
        tput setaf 2; echo "I swear to LOKI, you better NOT use Special Characters" ; tput setaf 9;
      done
    else
      userpassword="${_arg_user_passsword}"
    fi
    clear
    echo ""
# Take user input for Valheim Server Public Display
    echo ""
    tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
    tput setaf 2; echo "------------------Public Server Display Name----------------" ; tput setaf 9;
    tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
    tput setaf 1;  echo "Enter a name for your Valheim Server" ; tput setaf 9;
    tput setaf 1;  echo "This is for the Public Steam Browser Listing" ; tput setaf 9;
    tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
    tput setaf 2;  echo "Good Example: Zero's Viking Server" ; tput setaf 9;
    tput setaf 1;  echo "Bad Example: Zero's #1 Server Cash Signs hashtags or other special chars, it will break the script!" ; tput setaf 9;
    tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
    if [[ -z "${_arg_display}" ]]; then
      echo ""
      read -p "Enter public server display name: " displayname
      tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
      echo ""
      clear
    else
      displayname="${_arg_display}"
    fi
# Take user input for Valheim Server World Database Generation
    echo ""
    if [[ -z "${_arg_world}" ]]; then
      while true; do
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        tput setaf 2; echo "----------------------Set your World Name-------------------" ; tput setaf 9;
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        tput setaf 1;  echo "Name must be 4 Characters or more" ; tput setaf 9;
        tput setaf 1;  echo "No Special Characters not even a space" ; tput setaf 9;
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        tput setaf 2;  echo "Good Example: ThorsHammer" ; tput setaf 9;
        tput setaf 1;  echo "Bad Example: Loki is a Trickster" ; tput setaf 9;
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        echo ""
        read -p "Please make a world name: " worldname
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        [[ ${#worldname} -ge 4 && "$worldname" =~ ^[[:alnum:]]+$ ]] && break
        tput setaf 2;  echo "World Name not set: Too Short or has Special Characters" ; tput setaf 9; 
        tput setaf 2; echo "I swear to LOKI, you better NOT use Special Characters" ; tput setaf 9; 
      done
    else
      worldname="${_arg_world}"
    fi
    clear
    echo ""
# Take user input for Valheim Server password
# Added security for harder passwords
    echo ""        
    tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
    tput setaf 2; echo "--------------------Set Server Access Password--------------" ; tput setaf 9;
    tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
    tput setaf 1; echo "Now for Loki, please follow instructions" ; tput setaf 9;
    tput setaf 1; echo "Server is required to have a password" ; tput setaf 9;
    tput setaf 1; echo "Password cannot match public display name or world name" ; tput setaf 9;
    tput setaf 1; echo "Make your password unique" ; tput setaf 9;
    tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
    tput setaf 2; echo "Your public display name: $displayname " ; tput setaf 9;
    tput setaf 2; echo "Your world name: $worldname " ; tput setaf 9;
    tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
    if [[ -z "${_arg_password}" ]]; then
      while true; do
        tput setaf 1;  echo "This password must be 5 Characters or more" ; tput setaf 9;
        tput setaf 1;  echo "At least one number, one uppercase letter and one lowercase letter" ; tput setaf 9;
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        tput setaf 2;  echo "Good Example: Viking12" ; tput setaf 9;
        tput setaf 1;  echo "Bad Example: Vik!" ; tput setaf 9;
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        read -p "Enter Password to Enter your Valheim Server: " password
        tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
        [[ ${#password} -ge 5 && "$password" == *[[:lower:]]* && "$password" == *[[:upper:]]* && "$password" =~ ^[[:alnum:]]+$ ]] && break
        tput setaf 2; echo "Password not accepted - Too Short, Special Characters" ; tput setaf 9;
        tput setaf 2; echo "I swear to LOKI, you better NOT use Special Characters" ; tput setaf 9;
      done
    else
      password="${_arg_password}"
    fi

    #EDIT HERE #1
    #build account to run Valheim
    tput setaf 1; echo "Building steam account NONROOT" ; tput setaf 9;
    sleep 1
    useradd --create-home --shell /bin/bash --password $userpassword steam
    cp /etc/skel/.bashrc /home/steam/.bashrc
    cp /etc/skel/.profile /home/steam/.profile
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

    echo ""
    cat >> /home/steam/serverSetup.txt <<EOF
Here is the information you entered
This information is for you to ref later, in case you forgot
---------------------------------------------------------------
nonroot steam password:  $userpassword
Public Server Name:      $displayname
Local World Name:        $worldname
Valheim Server Password: $password
---------------------------------------------------------------
Each time this is ran, the past info will be added to each line
---------------------------------------------------------------
EOF
    chown steam:steam /home/steam/serverSetup.txt
    clear
    echo "Here is the information you entered"
    echo "This information is saved in the valheim_server.sh file"
    echo "This information is saved in /home/steam/serverSetup.txt for referance later, if you forget"
    tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
    tput setaf 2; echo "nonroot steam password:  $userpassword " ; tput setaf 9;
    tput setaf 2; echo "Public Server Name:      $displayname " ; tput setaf 9;
    tput setaf 2; echo "Local World Name:        $worldname " ; tput setaf 9;
    tput setaf 2; echo "Valheim Server Password: $password " ; tput setaf 9;
    tput setaf 2; echo "------------------------------------------------------------" ; tput setaf 9;
    echo ""
    sleep 5

    #install steamcmd and libsd12-2
    tput setaf 1; echo "Installing steamcmd and libsdl2" ; tput setaf 9;
    echo steam steam/question select "I AGREE" | sudo debconf-set-selections
    echo steam steam/license note '' | sudo debconf-set-selections
    apt install steamcmd libsdl2-2.0-0 libsdl2-2.0-0:i386 -y
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

    #build symbolic link for steamcmd
    tput setaf 1; echo "Building symbolic link for steamcmd" ; tput setaf 9;
    ln -s /usr/games/steamcmd /home/steam/steamcmd
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

    #chown steam user to steam
    tput setaf 1; echo "Setting steam permissions" ; tput setaf 9;
    chown steam:steam -Rf /home/steam/*
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

    #Download Valheim from steam
    tput setaf 1; echo "Downloading and installing Valheim from Steam" ; tput setaf 9;
    sleep 1
    /home/steam/steamcmd +login anonymous +force_install_dir ${_arg_path} +app_update 896660 validate +exit
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

    #build config for start_valheim.sh
    tput setaf 1; echo "Deleting old configuration if file exist" ; tput setaf 9;  
    tput setaf 1; echo "Building Valheim start_valheim server configuration" ; tput setaf 9;
    [ -e ${_arg_path}/start_valheim.sh ] && rm ${_arg_path}/start_valheim.sh
    sleep 1
    cat >> ${_arg_path}/start_valheim.sh <<EOF
#!/bin/bash
export templdpath=\$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=./linux64:\$LD_LIBRARY_PATH
export SteamAppId=892970
# Tip: Make a local copy of this script to avoid it being overwritten by steam.
# NOTE: You need to make sure the ports 2456-2458 is being forwarded to your server through your local router & firewall.
./valheim_server.x86_64 -name "${displayname}" -port "2456" -nographics -batchmode -world "${worldname}" -password "${password}"
#export LD_LIBRARY_PATH=$templdpath
export LD_LIBRARY_PATH=\$templdpath
EOF
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

    #build check log script
    tput setaf 1; echo "Deleting old check log script if exist" ; tput setaf 9; 
    tput setaf 1; echo "Building check log script" ; tput setaf 9;
    [ -e /home/steam/check_log.sh ] && rm /home/steam/check_log.sh
    sleep 1
    cat >> /home/steam/check_log.sh <<EOF
journalctl --unit=valheimserver --reverse
EOF
    chmod +x /home/steam/check_log.sh
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

    #set execute permissions
    tput setaf 1; echo "Setting execute permissions on start_valheim.sh" ; tput setaf 9;
    chmod +x ${_arg_path}/start_valheim.sh
    tput setaf 2; echo "Done" ; tput setaf 9;
    tput setaf 1; echo "Setting execute permissions on check_log.sh" ; tput setaf 9; 
    chmod +x /home/steam/check_log.sh
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

    #build systemctl configurations for execution of processes for Valheim Server
    tput setaf 1; echo "Deleting old configuration if file exist" ; tput setaf 9; 
    tput setaf 1; echo "Building systemctl instructions for Valheim" ; tput setaf 9; 
    # remove old Valheim Server Service
    [ -e /etc/systemd/system/valheimserver.service ] && rm /etc/systemd/system/valheimserver.service
    # remove past Valheim Server Service
    [ -e /lib/systemd/system/valheimserver.service ] && rm /lib/systemd/system/valheimserver.service
    sleep 1
    # Add new Valheim Server Service
    # Thanks @QuadeHale
    cat >> /lib/systemd/system/valheimserver.service <<EOF
[Unit]
Description=Valheim Server
Wants=network-online.target
After=syslog.target network.target nss-lookup.target network-online.target
[Service]
Type=simple
Restart=on-failure
RestartSec=5
StartLimitInterval=60s
StartLimitBurst=3
User=steam
Group=steam
ExecStartPre=/home/steam/steamcmd +login anonymous +force_install_dir ${_arg_path} +app_update 896660 validate +exit
ExecStart=${_arg_path}/start_valheim.sh
ExecReload=/bin/kill -s HUP \$MAINPID
KillSignal=SIGINT
WorkingDirectory=${_arg_path}
LimitNOFILE=100000
[Install]
WantedBy=multi-user.target
EOF
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

    #chown steam user permissions to all of user steam dir location
    tput setaf 1; echo "Setting steam account permissions to /home/steam/*" ; tput setaf 9; 
    chown steam:steam -Rf /home/steam/*
    tput setaf 2; echo "Done" ; tput setaf 9;
    sleep 1

    # Reload daemons
    tput setaf 1; echo "Reloading daemons and spawning Necks" ; tput setaf 9; 
    systemctl daemon-reload
    tput setaf 2; echo "Done" ; tput setaf 9; 
    sleep 1

    # Start server
    tput setaf 1; echo "By Thors Hammer we are Starting the Valheim Server" ; tput setaf 9; 
    systemctl start valheimserver
    tput setaf 2; echo "Done" ; tput setaf 9; 
    sleep 1

    # Enable server on restarts
    tput setaf 1; echo "Enabling Valheim Server on start or after reboots" ; tput setaf 9; 
    systemctl enable valheimserver
    tput setaf 2; echo "Done" ; tput setaf 9; 
    sleep 2
    clear
    tput setaf 2; echo "Check server status by typing systemctl status valheimserver.service"
    tput setaf 2; echo "Thank you for using the script."
    tput setaf 2; echo "AND A HUGE THANKS TO github: @Lachlanmac, @JamieeLee, @RedKrieg, @bherbruck "
    tput setaf 2; echo "@xaviablaza, @joaoanes, @amasover, @madmozg, @nicolas-martin, @devdavi and others!"
    tput setaf 2; echo "If your name is missing! Let me know!"
    tput setaf 2; echo "Twitch: ZeroBandwidth"
    tput setaf 2; echo "GLHF"
    tput setaf 9;
    echo ""
  
    echo "" 
    else
        echo "Canceling the INSTALL of Valheim Server Service - because Loki sucks"
    fi
}

valheim_server_install "$@"
